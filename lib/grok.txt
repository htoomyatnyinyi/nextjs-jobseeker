// lib/session.ts
import { SignJWT, jwtVerify } from "jose";
import { prisma } from "@/lib/prisma";

const secretKey = process.env.JWT_SECRET;
const key = new TextEncoder().encode(secretKey);

// Create a session JWT
export async function createSession(userId: string) {
  const user = await prisma.user.findUnique({
    where: { id: userId },
    select: { id: true, role: true },
  });

  if (!user) {
    throw new Error("User not found");
  }

  const expires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours
  const session = await new SignJWT({ userId: user.id, role: user.role })
    .setProtectedHeader({ alg: "HS256" })
    .setIssuedAt()
    .setExpirationTime("24h")
    .sign(key);

  return { session, expires };
}

// Decrypt and verify the session JWT
export async function decrypt(cookie: string) {
  try {
    const { payload } = await jwtVerify(cookie, key, {
      algorithms: ["HS256"],
    });
    return payload; // Contains { userId, role, iat, exp }
  } catch (error) {
    console.error("JWT verification failed:", error);
    return null;
  }
}
generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id          String  @id @default(cuid())
  username    String  @unique
  email       String  @unique
  hashedPassword     String
  role        Role    @default(USER)
  verified    Boolean @default(false)
  isActive    Boolean @default(false)
  failedSigninAttempts Int @default(0)
  lockedUntil DateTime?
  lastSignin  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // --- Relations ---
  passwordResetTokens PasswordResetToken[]
  verificationTokens  VerificationToken[]
  // jobSeekerProfiles   JobSeekerProfile[]
  jobSeekerProfile   JobSeekerProfile?
  employerProfiles    EmployerProfile[]
}

model VerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model JobSeekerProfile {
  id        String  @id @default(cuid())
  fullName  String
  firstName String
  lastName  String
  phone     String
  gender    Gender  @default(PREFER_NOT_TO_SAY)
  dateOfBirth DateTime? 
  address   String?
  bio       String?
  education String?

  profileImageUrl String?
  coverImageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt       

  // ---- Relations ----
  // userId    String  // one to many
  userId    String  @unique // one to one
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  // --- many relations ---
  experiences  JobSeekerExperience[]
  resumes   Resume[]
  jobApplication  JobApplication[]
  jobSeekerSkill  JobSeekerSkill[]
  savedJob  SavedJob[]
}

model JobSeekerExperience {
  id          String   @id @default(cuid())
  jobTitle    String
  companyName String
  startDate   DateTime
  endDate     DateTime?
  isCurrentlyWorkingHere Boolean @default(false)
  description String?

  // ---- relations ----
  jobSeekerProfileId   String     
  jobSeekerProfile     JobSeekerProfile     @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
}

model EmployerProfile {
  id          String  @id @default(cuid())
  companyName String
  registeredNumber  String  @default(cuid())
  govRegisteredNumber String
  phone       String
  establishDate DateTime?
  companyEmail  String?
  address     String?
  city        String?
  state       String?
  postalcode  String?
  country     String?
  webAddress  String?
  industry    String?
  companyDescription  String?
  logoUrl     String?
  stats       EmployerStatus  @default(PENDING)
  subscriptionPlan  SubscriptionPlan  @default(FREE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt      

  // ---- Relations ----
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade) 
  // ---- many to many ---
  JobPosts    JobPost[]
}


model JobPost {
  id          String  @id @default(cuid())
  title       String
  description String 
  salaryMin   Decimal
  salaryMax   Decimal?
  location    String?
  address     String?
  employmentType  EmploymentType @default(FULL_TIME)
  category    String?
  imageUrl    String?
  applicationDeadLine DateTime?
  isActive    Boolean @default(false)
  postedAt    DateTime  @default(now())

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // ---- relations ----
  employerId  String
  employer    EmployerProfile    @relation(fields: [employerId], references: [id]) // check here may be need to link with User table

  // ---- one to may ---
  responsibilities    JobResponsibility[]
  requirements        JobRequirement[]
  applications        JobApplication[]
  savedJobs           SavedJob[]
  skills              JobPostSkill[]

  @@index([title])
  @@index([location])
  @@index([category])
}

model JobResponsibility {
  id      String      @id @default(cuid())
  responsibility  String
  displayOrder    Int @default(0)

  // ---- relations ----
  jobPostId String
  jobPost JobPost @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
}
model JobRequirement {
  id           String      @id @default(cuid())
  requirement   String   
  displayOrder  Int      @default(0)

  // ---- relations ---- 
  jobPostId    String     
  jobPost      JobPost  @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
}

model Product {
  id      String @id @default(cuid())
  title   String?
  price   Int?
  description   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Resume {
  id         String   @id @default(cuid())
  filePath   String   
  fileName   String   
  fileType   String   
  uploadedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // --- relations ----
  jobSeekerId       String      
  jobSeekerProfile  JobSeekerProfile     @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)

  // --- many to many ---
  // jobApplications JobApplication[]
}

model JobApplication {
  id         String         @id @default(cuid())
  applicationStatus         ApplicationStatus @default(PENDING)
  appliedAt  DateTime       @default(now()) 
  updatedAt  DateTime       @updatedAt 

  // --- relations ---
  jobSeekerProfileId     String          
  jobSeekerProfile       JobSeekerProfile           @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
  jobPostId  String            
  jobPost    JobPost        @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
  // resumeId   String          
  // resume     Resume         @relation(fields: [resumeId], references: [id], onDelete: SetNull)
}

model SavedJob {
  id        String      @id @default(cuid())
  savedAt   DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // --- relations ---
  jobSeekerProfileId    String     
  jobSeekerProfile      JobSeekerProfile        @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
  jobPostId String      
  jobPost   JobPost     @relation(fields: [jobPostId], references: [id], onDelete: Cascade)

  // @@unique([userId, jobPostId])
}


model JobSeekerSkill {
  id            String          @id @default(cuid())
  skillName     String     
  proficiency   Proficiency     @default(INTERMEDIATE)
 
  //  --- relations ---
  jobSeekerProfileId        String         
  jobSeekerProfile          JobSeekerProfile            @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
  @@index([skillName])
}

model JobPostSkill {
  id                 String       @id @default(cuid())
  skillName          String     
  requiredProficiency Proficiency @default(INTERMEDIATE)

  // --- relations ---
  jobPostId          String        
  jobPost            JobPost      @relation(fields: [jobPostId], references: [id], onDelete: Cascade)

  @@index([skillName])
}

// --- ENUMS: For providing controlled vocabulary ---
enum Role {
  USER
  EMPLOYER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum EmployerStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  APPRENTICESHIP
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEWED
  OFFERED
  REJECTED
  WITHDRAWN
}

enum Proficiency {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}